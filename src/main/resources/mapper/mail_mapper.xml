<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
      
<mapper namespace="kr.co.two.mail.dao.MailDAO">
	
	<insert id="receiverMailAlarm" parameterType="mail">
		INSERT INTO alarm(alarmcontent,alarm_code,alarm_receiver,is_read,iden_id)
		VALUES('새로운 메일 알림','ALARM_MAIL',#{member_id},false,#{mail_id})
	</insert>
	
	<insert id="referrerMailAlarm" parameterType="mail">
		INSERT INTO alarm(alarmcontent,alarm_code,alarm_receiver,is_read,iden_id)
		VALUES('새로운 참조메일 알림','ALARM_MAIL',#{member_id},false,#{mail_id})
	</insert>
	
   <!-- 받는이 옵션 가져오기 -->
   <select id="mailgetOptions" resultType="mail">
	SELECT mb.*, c_dept.code_name AS dept_name, c_pos.code_name AS position_name
	FROM member mb
	LEFT OUTER JOIN 
	(SELECT code_id, code_name FROM code WHERE code_group_id = 'DEPT') c_dept ON c_dept.code_id = mb.dept_code
	LEFT OUTER JOIN 
	(SELECT code_id, code_name FROM code WHERE code_group_id = 'POSITION') c_pos ON c_pos.code_id = mb.position_code
   </select>
   
   <!-- 메일쓰기 -->
   <insert id="mailWrite" parameterType="mail"
      useGeneratedKeys="true"
      keyColumn="mail_id"
      keyProperty="mail_id">
      INSERT INTO mail(member_id,writeTime,mailSubject,mailContent,blind,Favorites,temp)
         VALUES(#{member_id},#{writeTime},#{mailSubject},#{mailContent},0,false,
      <choose>
            <when test='type == "save" or type == "send"'>
              false
            </when>
            <otherwise>
              true
            </otherwise>
      </choose>
        )
   </insert>
   
   <!-- 내게쓰기 -->
   <insert id="savereceiverWrite" parameterType="mail">
      INSERT INTO mail_receiver(mail_id,member_id,read_chk,bookmark,blind,is_receiver)
         VALUES(#{mail_id},#{member_id},false,false,0,2)
   </insert>
   
   <!-- 메일 첨부파일 올리기 -->
   <insert id="mailPhotoUpload">
      INSERT INTO mail_file (mail_id,ori_file_name,file_path,new_file_name)
         VALUES (#{param1},#{param2},#{param3},#{param4})
   </insert>
   
   <!-- 받는사람 DB 저장 -->
   <insert id="receiverWrite" parameterType="mail">
      INSERT INTO mail_receiver(mail_id,member_id,read_chk,bookmark,blind,is_receiver)
         VALUES(#{mail_id},#{member_id},false,false,0,0)
   </insert>
   
   <!-- 참조자 DB 저장 -->
   <insert id="referenceMemberWrite" parameterType="mail">
      INSERT INTO mail_receiver(mail_id,member_id,read_chk,bookmark,blind,is_receiver)
         VALUES(#{mail_id},#{member_id},false,false,0,1)
   </insert>
   
   <!-- 참조자 여부 -->
   <select id="findMailReference" resultType="int" parameterType="int">
      SELECT COUNT(member_id) FROM mail_receiver WHERE mail_id=#{mail_id} AND is_receiver = 1 
   </select>
   
   <!-- 메일 상세보기 (참조자,받는사람 리스트 가져오기 -->
   <select id="mailSendDetail" resultType="mail">
      SELECT mr.mail_id, mr.member_id, mr.is_receiver,m.name, m2.mailSubject, m2.mailContent,mr.bookmark,
          MAX(CASE WHEN c.code_group_id = 'DEPT' THEN c.code_name END) AS dept_name,
          MAX(CASE WHEN c.code_group_id = 'POSITION' THEN c.code_name END) AS position_name
      FROM mail_receiver mr
      JOIN member m ON mr.member_id = m.member_id
      JOIN mail m2 ON m2.mail_id = mr.mail_id
      JOIN code c ON (c.code_id = m.position_code OR c.code_id = m.dept_code)
      WHERE mr.mail_id = #{mail_id}
      AND mr.is_receiver IN (0, 1 ,2)
      GROUP BY m.name
      ORDER BY m.name;
   </select>
   
   <!-- 메일 상세보기 (보낸사람) -->
   <!-- <select id="mailMemberDetail" resultType="mail">
      SELECT mb.name, mb.dept_code, mb.position_code, m.*, c.code_name, c.code_group_id,m.favorites,m.mail_id
      FROM member mb
      RIGHT OUTER JOIN mail m ON (mb.member_id = m.member_id)
      LEFT OUTER JOIN code c ON (c.code_id = mb.dept_code) OR (c.code_id=mb.position_code)
      WHERE m.mail_id = #{mail_id} ORDER BY code_group_id ASC
   </select> -->
   
   <select id="mailMemberDetail" resultType="mail">
	  SELECT DISTINCT 
	  <if test="type=='receive' or type=='self' or type=='all' or type=='trash' or type=='import'">
	  mr.mail_id, mb.member_id AS send, mr.member_id, m.writeTime, m.mailSubject, m.mailContent, mr.blind, m.favorites, mr.bookmark, mr.is_receiver, m.temp, mb.name,
	  MAX(CASE WHEN c.code_group_id = 'DEPT' THEN c.code_name END) AS dept_name,
  	  MAX(CASE WHEN c.code_group_id = 'POSITION' THEN c.code_name END) AS position_name,mr.read_chk, mr.read_date
	  FROM mail m
	  LEFT OUTER JOIN mail_receiver mr ON m.mail_id = mr.mail_id
	  LEFT OUTER JOIN member mb ON mb.member_id = m.member_id
	  LEFT OUTER JOIN code c ON (c.code_id = mb.dept_code) OR (c.code_id=mb.position_code)
	  WHERE mr.member_id = #{member_id} AND mr.mail_id = #{mail_id}
	  </if>
	    <if test="type=='all' and !(searchText == null or searchText.equals(''))"> 
	  	<if test ="searchInformation=='allMail'">
	  		AND (m.mailContent LIKE CONCAT('%', #{searchText}, '%') OR m.mailSubject LIKE CONCAT('%', #{searchText}, '%'))
	  	</if>
	  	<if test ="searchInformation=='mailSubject'">
	  		AND m.mailContent LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	<if test ="searchInformation=='mailContent'">
	  		AND m.mailSubject LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  </if>
	  <if test="type=='receive'">
	  	AND mr.blind=0 AND (mr.is_receiver = 0 OR mr.is_receiver = 1)
	  </if>
	  <if test="type=='self'">
	  	AND mr.blind=0 AND mr.is_receiver = 2
	  </if>
	  <if test="type=='trash'">
	  	AND mr.blind = 1 AND mr.blind IS NOT NULL
	  </if>
	  <if test="type=='import'">
	  	AND mr.blind = 0 AND mr.bookmark = 1
	  </if>
	  <if test="type== 'all' and !(searchText == null or searchText.equals('')) or type=='trash' or type=='import'">
	  		UNION SELECT DISTINCT 
	  </if>
	   <if test="type=='send' or type=='temp' or type=='all' or type=='trash' or type=='import'">
		  m.mail_id, mb.member_id AS send, m.member_id, m.writeTime, m.mailSubject, m.mailContent, m.blind, m.favorites, 3 AS bookmark,  3 AS is_receiver, m.temp, mb.name,
		  MAX(CASE WHEN c.code_group_id = 'DEPT' THEN c.code_name END) AS dept_name,
  	  	  MAX(CASE WHEN c.code_group_id = 'POSITION' THEN c.code_name END) AS position_name,NULL AS read_chk, NULL AS read_date
		  FROM mail m
		  LEFT OUTER JOIN member mb ON mb.member_id = m.member_id 
		  LEFT OUTER JOIN code c ON (c.code_id = mb.dept_code) OR (c.code_id=mb.position_code)
		  WHERE m.member_id = #{member_id} AND m.mail_id = #{mail_id}
		  <if test="type=='all' and !(searchText == null or searchText.equals(''))"> 
		  	<if test ="searchInformation=='allMail'">
		  		AND (m.mailContent LIKE CONCAT('%', #{searchText}, '%') OR m.mailSubject LIKE CONCAT('%', #{searchText}, '%'))
		  	</if>
		  	<if test ="searchInformation=='mailSubject'">
		  		AND m.mailContent LIKE CONCAT('%', #{searchText}, '%')
		  	</if>
		  	<if test ="searchInformation=='mailContent'">
		  		AND m.mailSubject LIKE CONCAT('%', #{searchText}, '%')
		  	</if>
		  </if>
	    </if>
	    <if test="type=='temp'">
	  		AND m.blind=0 AND temp = 1
		</if>
		<if test="type=='send'">
			AND m.blind=0 AND temp = 0
		</if>
		<if test="type=='trash'">
			AND m.blind=1 AND m.blind IS NOT NULL
		</if>
		<if test="type=='import'">
			AND m.blind = 0 AND m.favorites=1
		</if>
	</select>
   
   <select id="mailCheckPhoto" resultType="int">
      SELECT COUNT(mail_file_id) FROM mail_file WHERE mail_id = #{mail_id}
   </select>
   
   <select id="mailHasPhoto" resultType="mail">
      SELECT * FROM mail_file WHERE mail_id = #{mail_id}
   </select>
   
   <update id="mailFavorite">
      UPDATE 
	 <if test='type == "send" || type== "temp"'>
	    mail SET favorites = #{isLike} WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	  <if test='type == "trash" and( set == "send" || set == "temp" )'>
	    mail SET favorites = #{isLike} WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	  <if test='type == "self" || type == "receive"'>
	    mail_receiver SET bookmark = #{isLike} WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	  <if test='type == "trash" and( set == "self" || set == "receive" )'>
	    mail_receiver SET bookmark = #{isLike} WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	</update>
   
   <select id="isFavoriteStatus" resultType="mail">
      SELECT  
      <if test='type == "send"|| type== "temp"'>
	    * FROM mail WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	  <if test='type == "trash" and( set == "send" || set == "temp" )'>
	    * FROM mail WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	  <if test='type == "self" || type == "receive"'>
	    * FROM mail_receiver WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
	  <if test='type == "trash" and( set == "self" || set == "receive" )'>
	    * FROM mail_receiver WHERE mail_id = #{mail_id} AND member_id = #{member_id}
	  </if>
   </select> 
   
   <!-- <update id="mailbookmark">
      UPDATE mail_receiver SET bookmark = #{isFavorite} WHERE mail_id=#{mailId} AND member_id = '12421313213'
      <if test='type=="self"'>
      AND is_receiver = '2'
      </if>
   </update>
   
   <select id="isbookmarkStatus" resultType="boolean">
      SELECT bookmark FROM mail_receiver WHERE mail_id = #{mailId} AND member_id = '12421313213'
      <if test='type=="self"'>
      AND is_receiver = '2'
      </if>
   </select> -->
   
   <insert id="tempListUpdate" >
      INSERT INTO mail (mail_id, writeTime, member_id, mailSubject, mailContent)
      VALUES (#{mail_id},#{writeTime},9988392, #{mailSubject}, #{mailContent})
      ON DUPLICATE KEY UPDATE
          mailSubject = #{mailSubject},
          mailContent = #{mailContent},
          writeTime = #{writeTime}
   </insert>
   
   <select id="totalCount" resultType="int">
   SELECT 
   <if test="type== 'all' and !(searchText == null or searchText.equals('')) or type =='import' or type=='trash'">
   COUNT(*) AS row_count
	FROM (
	SELECT m.mail_id,m.member_id,m.writeTime,m.mailSubject,m.mailContent,m.blind,m.favorites,mr.bookmark,
    mr.is_receiver,m.temp,mb.name,<!-- mf.mail_file_id, -->mr.read_chk,mr.read_date
	</if>
	<if test="type=='receive' or type=='self'">
	COUNT (mr.mail_id) 
	</if>
	<if test="type=='receive' or type=='self' or type== 'all' or type =='import' or type=='trash'">
	  FROM mail m
	  LEFT OUTER JOIN mail_receiver mr ON m.mail_id = mr.mail_id
	  LEFT OUTER JOIN member mb ON mb.member_id = m.member_id
      <!-- LEFT OUTER JOIN mail_file mf ON mf.mail_id = mr.mail_id -->
	  WHERE mr.member_id = #{member_id}
	  <if test="type=='all' and !(searchText == null or searchText.equals(''))"> 
	  	<if test ="searchInformation=='allMail'">
	  		AND (m.mailContent LIKE CONCAT('%', #{searchText}, '%') OR m.mailSubject LIKE CONCAT('%', #{searchText}, '%'))
	  	</if>
	  	<if test ="type=='all' and searchInformation=='mailSubject'">
	  		AND m.mailSubject LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	<if test ="type=='all' and searchInformation=='mailContent'">
	  		AND m.mailContent LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	AND mr.blind in (0,1) 
	  </if>
	  <if test="type=='receive'">
	  	AND mr.blind=0 AND (mr.is_receiver = 0 OR mr.is_receiver = 1)
	  </if>
	  <if test="type=='self'">
	  	AND mr.blind=0 AND mr.is_receiver = 2
	  </if>
	  <if test="type=='import'">
	  	AND mr.blind= 0 AND mr.bookmark=1
	  </if>
	  <if test="type=='trash'">
	  	AND mr.blind = 1
	  </if>
	</if>
	  <if test="type== 'all' and !(searchText == null or searchText.equals('')) or type =='import' or type=='trash'">
	  		UNION
	  		SELECT DISTINCT 
			m.mail_id, m.member_id, m.writeTime, m.mailSubject, m.mailContent, m.blind, m.favorites, 3 AS bookmark,  3 AS is_receiver, 
			m.temp, mb.name, <!-- mf.mail_file_id -->3 as read_chk, NULL as read_date
	  </if>
	  <if test="type=='temp' or type=='send'">
	  		COUNT (m.mail_id) 
	  </if>
	  <if test="type=='temp' or type=='send' or type=='all' or type =='import' or type=='trash'">
		  FROM mail m
		  LEFT OUTER JOIN member mb ON mb.member_id = m.member_id
		  <!-- LEFT OUTER JOIN mail_file mf ON (mf.mail_id = m.mail_id) -->
		  WHERE m.member_id = #{member_id}
		  AND NOT EXISTS (
	      SELECT 1
	      FROM mail_receiver mr
	      WHERE m.mail_id = mr.mail_id AND mr.is_receiver = 2)
	  </if>
	  <if test="type=='all' and !(searchText == null or searchText.equals('')) "> 
	  	<if test ="searchInformation=='allMail'">
	  		AND (m.mailContent LIKE CONCAT('%', #{searchText}, '%') OR m.mailSubject LIKE CONCAT('%', #{searchText}, '%'))
	  	</if>
	  	<if test ="searchInformation=='mailSubject'">
	  		AND m.mailSubject LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	<if test ="searchInformation=='mailContent'">
	  		AND m.mailContent LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	AND m.blind in (0,1) 
	  </if>
	  <if test="type=='temp'">
	  	AND m.blind=0 AND temp = 1
	  </if>
	  <if test="type=='send'">
	  	AND m.blind=0 AND temp = 0
	  </if>
	  <if test="type=='import'">
	  	AND m.blind = 0 AND m.favorites = 1
	  </if>
	  <if test="type=='trash'">
	  	AND m.blind = 1
	  </if>
	  <if test="type== 'all' and !(searchText == null or searchText.equals(''))">
	  		) AS subquery
	  </if>
	  <if test="type=='import' or type=='trash'">
	  		) AS subquery 
	  </if>
	</select>
   
   
   
   
   <select id="mailSelfBox" resultType="mail">
	  SELECT 
	  <if test="type=='receive' or type=='self' or type=='all' or type=='import' or type=='trash'">
		m.mail_id,m.member_id,m.writeTime,m.mailSubject,m.mailContent,m.blind,m.favorites,mr.bookmark,
		mr.is_receiver,m.temp,mb.name,mf.mail_file_id,mr.read_chk,mr.read_date
		FROM mail m
    	LEFT OUTER JOIN mail_receiver mr ON m.mail_id = mr.mail_id
    	LEFT OUTER JOIN member mb ON mb.member_id = m.member_id
    	LEFT OUTER JOIN mail_file mf ON mf.mail_id = mr.mail_id
	    WHERE mr.blind IN (0, 1) AND mr.member_id = #{member_id}
	  </if>
	    <if test="type=='all' and !(searchText == null or searchText.equals(''))"> 
	  	<if test ="searchInformation=='allMail'">
	  		AND (m.mailContent LIKE CONCAT('%', #{searchText}, '%') OR m.mailSubject LIKE CONCAT('%', #{searchText}, '%'))
	  	</if>
	  	<if test ="searchInformation=='mailSubject'">
	  		AND m.mailSubject LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	<if test ="searchInformation=='mailContent'">
	  		AND m.mailContent LIKE CONCAT('%', #{searchText}, '%')
	  	</if>
	  	AND mr.blind in (0,1)
	  </if>
	  <if test="type=='receive'">
	  	AND mr.blind=0 AND (mr.is_receiver = 0 OR mr.is_receiver = 1)
	  </if>
	  <if test="type=='self'">
	  	AND mr.blind=0 AND mr.is_receiver = 2
	  </if>
	  <if test="type=='import'">
			AND mr.bookmark = 1 AND mr.blind = 0
		</if>
		<if test="type=='trash'">
	  	AND mr.blind = 1
	  </if>
	  <if test="type=='self' or type=='all'">
	  	GROUP BY
    	m.mail_id, m.member_id,m.writeTime,m.mailSubject,m.mailContent,m.blind,m.favorites,m.temp,mb.name,
    	mf.mail_file_id,mr.read_chk,mr.read_date
	  </if>
	  <if test="type=='receive' or type=='import' or type=='trash'">
	  	GROUP BY m.mail_id
	  </if>
	  <if test="type== 'all' and !(searchText == null or searchText.equals('')) or type=='import' or type=='trash'">
	  		UNION SELECT DISTINCT 
	  </if>
	   <if test="type=='send' or type=='temp' or type=='all' or type=='import' or type=='trash'">
			m.mail_id, m.member_id, m.writeTime, m.mailSubject, m.mailContent, m.blind, m.favorites, 3 AS bookmark,  3 AS is_receiver, 
			m.temp, mb.name, mf.mail_file_id,3 as read_chk, NULL as read_date
			FROM mail m
			LEFT OUTER JOIN member mb ON mb.member_id = m.member_id
			LEFT OUTER JOIN mail_file mf ON (mf.mail_id = m.mail_id)
		    WHERE m.member_id = #{member_id}
		    AND NOT EXISTS (
			    SELECT 1
			    FROM mail_receiver mr
			    WHERE m.mail_id = mr.mail_id AND mr.is_receiver = 2) 
		  <if test="type=='all' and !(searchText == null or searchText.equals(''))"> 
		  	<if test ="searchInformation=='allMail'">
		  		AND (m.mailContent LIKE CONCAT('%', #{searchText}, '%') OR m.mailSubject LIKE CONCAT('%', #{searchText}, '%'))
		  	</if>
		  	<if test ="searchInformation=='mailSubject'">
		  		AND m.mailSubject LIKE CONCAT('%', #{searchText}, '%')
		  	</if>
		  	<if test ="searchInformation=='mailContent'">
		  		AND m.mailContent LIKE CONCAT('%', #{searchText}, '%')
		  	</if>
		  	AND m.blind in (0,1) 
		  </if>
	    </if>
	    <if test="type=='temp'">
	  		AND m.blind=0 AND m.temp = 1
		</if>
		<if test="type=='send'">
			AND m.blind=0 AND m.temp = 0
		</if>
		<if test="type=='import'">
			AND m.favorites = 1 AND m.blind = 0
		</if>
		<if test="type=='trash'">
	  		AND m.blind = 1
	  	</if>
	  	<if test="type=='send' or type=='temp' or type=='all' or type=='import' or type=='trash'">
	  	GROUP BY m.mail_id
	  	</if>
	  	<if test="mailFilter == 'new'">
	  		ORDER BY writeTime DESC
	  	</if>
	  	<if test="mailFilter == 'old'">
	  		ORDER BY writeTime 
	  	</if>
		
	    LIMIT #{cnt} OFFSET #{offset}
	</select>
	
	<!-- 사진 완전 삭제 -->
	<delete id="mailPhotodel">
		DELETE FROM mail_file WHERE mail_id = #{mail_id};
	</delete>
	
	<select id="mailCheckPhotoName" resultType="list">
		SELECT new_file_name FROM mail_file WHERE mail_id = #{mail_id};
	</select>
	
	<!-- 휴지통으로 보내기 -->
	<update id="mailtrash">
		UPDATE 
		<if test='type == "send" || type== "temp"'>
	    mail SET blind = 1 WHERE mail_id = #{mailId} AND member_id = #{member_id}
	  </if>
	  <if test='type == "self" || type == "receive"'>
	    mail_receiver SET blind = 1 WHERE mail_id = #{mailId} AND member_id= #{member_id}
	  </if>
	</update>
	
	<!--  메일 진짜 삭제 -->
	<delete id="maildel">
		UPDATE
		<if test="set =='self' or set == 'receive'">
			mail_receiver SET blind = 3 WHERE blind = 1 AND member_id=#{member_id} AND mail_id = #{mail_id}
		</if>
		<if test="set =='send' or set == 'temp'">
			mail SET blind = 3 WHERE blind = 1 AND member_id=#{member_id} AND mail_id = #{mail_id}
		</if>
	</delete>
	
	<!-- 수신확인 -->
	<update id="updateread">
		UPDATE mail_receiver SET read_chk = true, read_date = #{writeTime} WHERE mail_id = #{mail_id} AND member_id= #{member_id}
	</update>
	
	<!-- temp = 0 임시저장후 보내기 -->
	<update id="tempsaveupdate">
		UPDATE mail SET temp = 0, writeTime = #{writeTime}, mailSubject = #{mailSubject}, mailContent=#{mailContent} WHERE mail_id = #{mail_id}
	</update>
	
	<!-- 휴지통 복원 -->
	<update id="mailrestore">
		UPDATE 
		<if test="set =='send' or set == 'temp'">
			mail SET blind = 0 WHERE member_id = #{member_id} AND mail_id = #{mail_id}
		</if>
		<if test="set =='receive' or set=='self'">
			mail_receiver SET blind = 0 WHERE member_id = #{member_id} AND mail_id = #{mail_id}
		</if>
	</update>
	
	<!-- 수신확인 카운트 -->
	<select id="readchktotal" resultType="int">
	SELECT COUNT(*) AS total_count
	FROM (
	    SELECT m.mail_id, m.member_id AS sender_member_id, m.mailSubject, m.mailContent, m.writeTime AS sentTime,
	        m.blind AS sentBlind, m2.member_id AS receiver_member_id, mr.read_chk, mr.read_date, m2.name AS receiver_name,
	        MAX(CASE WHEN c.code_group_id = 'DEPT' THEN c.code_name END) AS dept_name,
	        MAX(CASE WHEN c.code_group_id = 'POSITION' THEN c.code_name END) AS position_name
	    FROM mail m
	    JOIN mail_receiver mr ON m.mail_id = mr.mail_id
	    JOIN member m2 ON m2.member_id = mr.member_id
	    JOIN code c ON (c.code_id = m2.position_code OR c.code_id = m2.dept_code)
	    WHERE mr.is_receiver IN (0, 1) AND m.blind IN (0,1) AND m.member_id = #{member_id}
	    GROUP BY m.mail_id, sender_member_id, m.mailSubject, m.mailContent, m.writeTime, m.blind, m.favorites, m.temp, m2.member_id, 
	             mr.read_chk, mr.read_date, mr.bookmark, m2.name
	) AS subquery
	</select>
	
	<!-- 수신확인리스트 -->
	<select id="readchkBox" resultType="mail">
	SELECT m.mail_id, m.member_id AS sender_member_id,m.mailSubject,m.mailContent,m.writeTime AS sentTime,m.blind AS sentBlind,
	    m2.member_id AS receiver_member_id,mr.read_chk,mr.read_date,m2.name AS receiver_name,mr.blind,
	    MAX(CASE WHEN c.code_group_id = 'DEPT' THEN c.code_name END) AS dept_name,
	    MAX(CASE WHEN c.code_group_id = 'POSITION' THEN c.code_name END) AS position_name
	FROM mail m
	JOIN mail_receiver mr ON m.mail_id = mr.mail_id
	JOIN member m2 ON m2.member_id = mr.member_id
	JOIN code c ON (c.code_id = m2.position_code OR c.code_id = m2.dept_code)
	WHERE mr.is_receiver IN (0, 1) AND m.blind IN (0,1) AND m.member_id = #{member_id}
	GROUP BY m.mail_id, sender_member_id, m.mailSubject, m.mailContent, m.writeTime, m.blind, m.favorites, m.temp, m2.member_id, 
	         mr.read_chk, mr.read_date, mr.bookmark, m2.name
	ORDER BY m.writeTime DESC LIMIT #{cnt} OFFSET #{offset}
	</select>
	
	<!-- 발송삭제 -->
	<update id="delread">
	UPDATE mail_receiver SET blind = 2 WHERE mail_id = #{mail_id} AND member_id= #{receivermember}
	</update>
	</mapper>